

a)	输入两个数，输出这两个数的和。 
b)	输入两个数，输出两个数中较大的数。 
c)	输入两个数，输出两个数的乘积。 
d)	连续输入数字直至遇到 0，输出所有输入数的个数。 
e)	连续输入数字直至遇到 0，输出所有输入数的和。 
f)	连续输入数字直至遇到 0，输出所有输入数中的最大值。 
g)	连续输入数字直至遇到 0，输出所有输入数的最大与次大数。 
h)	连续输入数字直至遇到 0，升序输出所有输入数。 

10。1   
add   $t0  $s0  $s1 
000000  10000 10001  01000 00000  100000
0x 02114020
lw  $t0 ,0x20($t7)  
100011   00000 01000  0000 0000 0001 0100
0x8C080014

addi  $s0,$0,- 10
001000    00000     10000            1111 1111 1111 0110   补码表示
0x2010  EEE6
10.2

addi  $s0,$0,73    64+9
001000     00000    10000       0000 0000   0100  1001
0x2010 0049

sw   $t1   -7($t2)   pianyi 7wei
101011     01010    01001     1111 1111  1111 1001
0xAD49  EEE9


sub   $t1  ,$s7,$s2
000000  10010   10111  01001  00000  100010
0x02574822

10.3
1)  $a0     4      $v0        2
addi  $t0 ,$0, 0   001000 00000   01000 0000 0000 0000 0000 
addi  $t1,$0, 1
slt        $t2, $a0,$t1       000000  00100  01001  0 1010  000      00   101010
bne    $t2, $0 , 3  000101    01010  0 0000    0000 0000 0000 0011 
add    $t0, $t0,$t1  000000   01000   01001 01000        000 00     10 0000
addi   $ t1  ,  $t1   ,2  001000  01001 01001 0000 0000 0000 0010
 j  0x00400008         000010   0000 01 00 00 0000 0000 0000 0010   
add   $v0, $t0,$0    000000  01000  00000 00010  00000  10 0000

前面为0 所以是R型， 最后为2a    所以是slt 指令   最后为26位，后面补充2位，
2)
t0=0;
t1 =1 ;
if(a0<t1)  t2=1 ;  else  t2=0;
while(t2==0)  ｛
t0= t0+t1;
t1 =t1+2;
if(a0<t1)  t2=1 ;  else  t2=0;
｝

v0 = t 0 ;  
3）该程序的功能
求出小于a0的所有奇数的和。


10。4
IN   A 011   xxxxx
OUT  A  100  xxxxx   
DEC  A  101  xxxxx
JNZ  address  110  xaaaa
HALT   111xxxxx        //停在halt状态   
INC      000  xxxxx          A《－  A+1     increment   A    
LOAD   001  xaaaa       A 《=  M【aaaa】    //load A with  content of memory location aaaa




10。7
a）求两个和
00000:  10000000  IN    A
00001 : 001 11110   STORE  A， x
00010 : 100 00000  IN  A        
00011 :  010  11110       ADD  A  x  
           －－即可OUT  A 
HALT 
b）先存储 x，y  然后相减， y－x大于0 则输出y，否则输出x。

00000:  10000000 IN  A
00001 : 001 11110  STORE  A ,x  
00010 : 100 00000 IN  A
00011 : 001 11111 STORE  A，y
00100：011 11110     SUB  A,x            --  a2   -a1 
00101：110 01000  JPOS   OUT2
00110 ： 000 11110  LOAD  A,x     --out  a1
                     -- load 即可OUT     A                                                                     
00111：   111  00000     HALT 

OUT2: 01000：000  11111 LOAD  A ,y     --out a2
                    －－即可OUT  A  
01001：   111  00000     HALT 
11110：   000  00000   －－x
11111：   000 00000  －－ y

c)   输出x*y          y不断－1 
IN A  
STORE   A ，x
IN  A  
STORE   A , y
loop  :    ADD  A  x      --  x+y
STORE   A  ,  r1
LOAD     A,   y     
SUB  A  z   --    y=y-1
STORE  A ,y    
JPOS      loop       -- y>0  loop 
LOAD   A  r1 
HALT  
x :    0000 0000    
y:     0000 0000
r1:   0000 0000   --store result    
z:     0000 0001   - -store 1 

d) 输入个数
loop：IN   A  
JZ   out 
LOAD  A  y      --  y++ 
ADD  A   z
STORE  A  y   
JZ  loop
out: LOAD  A y    
HALT  

y:     0000 0000    
z:     0000 0001   - -store 1 
e)   计算输入总和        
loop：IN   A  
JZ   out 
ADD  A  y      --   a = a+y 
STORE  A  y  
LOAD  A  $0     
JZ  loop
out: LOAD  A y    
HALT  

$0：  0000 0000  --store  0
y:     0000 0000      --store sum 

f)输出最大值 ：    把最大值存在z内存中
loop：IN   A  
JZ   out 
STORE  A  y
SUB  A  z      --  compare a with max  
JPOS   cmax     -- change  max   
LOAD   A  $0 ;   --use $0  jump 
JZ   loop      -- a<max  
cmax:  LOAD  A  y     
STORE  A  z         －－save A at z     
LOAD  A  $0   
JZ  loop
out:   LOAD  A z    
HALT  

$0：  0000 0000  --store  0
y:     0000 0000    -- save A  
z:     0000 0000   - -store max 

g)输出最大值和次大值。  
loop：IN   A  
JZ   out 
STORE  A  y
SUB  A  m1      --  compare a with max  
JPOS   cmax     -- change  max   
LOAD  A  y    --else compare with second max 
SUB  A  m2
JPOS   cmax2      -- change  max2
LOAD   A  $0 ;   --use $0  jump 
JZ   loop      -- a<m2    
cmax:  LOAD  A  y     
STORE  A  m1         －－save A at m1     
LOAD  A  $0   
JZ  loop
cmax2: LOAD  A y
STORE  A  m2         －－save A at m2                   
LOAD  A  $0   
JZ  loop  
out:   LOAD  A m1  
LOAD  A m2   --out     
HALT  

$0：  0000 0000  --store  0
y:     0000 0000    -- save A  
m1:     0000 0000   - -store max 
m2:    0000 0000  --store second max

h)依次输入   ，升序输出。  这里应该不能用直接数实现，我们用y存地址。加一个相对寻址 LDI，和STI 。 STI  读取y内容 ，再作为地址存A 。y作为一个指针 堆栈顶。 SUBI  A －读取y内容 ，再作为地址读取减去。
h）

loop：IN   A  
JZ   out 
STORE A y
LOAD A  m1 




                                                    
loop：IN   A  
JZ   out 
STORE  A  y   －－ 存储输入
SUBI  A zd     －－A － 栈顶内容
JPOS  svin   －－ 输入大于栈顶，栈顶+1，输入存入栈顶。  输入小于等于栈顶，pop出输出栈，push到输入栈。
LDI   A zd  －－ pop输出栈顶
STI  A  izd    －－ 存入输入栈顶
7

svin：   
LOAD  A m1 －－ zd+
